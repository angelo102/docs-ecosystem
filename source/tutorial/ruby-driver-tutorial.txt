.. http://docs.mongodb.org/ecosystem/tutorial/ruby-driver-tutorial/

.. _ruby-driver-tutorial:

====================
Ruby Driver Tutorial
====================

.. default-domain:: mongodb

This tutorial discusses using the core MongoDB Ruby driver, version 2.0

Installation
------------

The Ruby driver is bundled as a gem, and is hosted on `Rubygems <http://rubygems.org>`_.
The driver can be installed manually or with bundler.

To install the gem manually:

.. code-block:: sh

    gem install mongo

To install the gem with bundler, include the following in your Gemfile:

.. code-block:: ruby

    gem 'mongo', '~> 2.0'

Note the following compatibility matrix to determine if the driver is
supported on your Runtime and server.

.. list-table::
   :header-rows: 1
   :widths: 28 30 30 30

   * - Ruby Version
     - 2.4.x
     - 2.6.x
     - 3.0.x

   * - MRI 1.8.x
     - No
     - No
     - No

   * - MRI 1.9.x
     - Yes
     - Yes
     - Yes

   * - MRI 2.0.x
     - Yes
     - Yes
     - Yes

   * - MRI 2.1.x
     - Yes
     - Yes
     - Yes

   * - MRI 2.2.x
     - Yes
     - Yes
     - Yes

   * - JRuby 1.7.x
     - Yes
     - Yes
     - Yes


Creating a Client
-----------------

The entry point to using the driver in all applications is via a ``Mongo::Client``.
A client can be created by passing in a list of hosts and options, or alternatively
can be instantiated using a URI. If a database name is not provided, then the
``admin`` database will be used by default.

To create a client to a standalone server, provide one host in the seed list.
Optionally you can force the cluster topology to be standalone without going through
the auto-discovery steps.

.. code-block:: ruby

  Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'mydb')
  Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'mydb', :connect => :direct)
  Mongo::Client.new('mongodb://127.0.0.1:27017/mydb')

To create a client to a replica set, pass one or more hosts and the replica set name.
The client has an auto-discovery feature that will find all members of the replica
set if not all are provided.

.. code-block:: ruby

  Mongo::Client.new([ '127.0.0.1:27017', '127.0.0.1:27018' ], :database => 'mydb', :replica_set => 'myapp')
  Mongo::Client.new('mongodb://127.0.0.1:27017,127.0.0.1:27018/mydb?replicaSet=myapp')

To create a client to a sharded cluster, pass one or more mongos hosts. The auto-
discovery functionality will determine that the servers are mongoses, but if you
would like to force it and bypass the auto-discovery pass the sharded option to the
client.

.. code-block:: ruby

  Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'mydb')
  Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'mydb', :connect => :sharded)
  Mongo::Client.new('mongodb://127.0.0.1:27017/mydb?connect=sharded' ])


Client Options
``````````````

A number of different options can be passed to a ``Mongo::Client`` to configure driver
behaviour, either by providing them in the options hash to the constructor or by
providing them in the URI.

Since the URI options are required in camel case, which is not the Ruby standard, the
following table shows the option in the URI and its corresponding option if passed
to the constructor in Ruby. Not the options passed directly should be symbols.

The options are explained in detail `here <http://docs.mongodb.org/master/reference/connection-string/>`_.
Note that options that are set in **milliseconds** in the URI, are represented as a ``Float``
in Ruby and the units are **seconds**.

URI Options Conversions
***********************

.. list-table::
   :header-rows: 1
   :widths: 40 105

   * - URI Option
     - Ruby Option

   * - replicaSet=String
     - ``:replica_set => String``

   * - ssl=Boolean
     - ``:ssl => true|false``

   * - connectTimeoutMS=Integer
     - ``:connection_timeout => Float``

   * - socketTimeoutMS=Integer
     - ``:socket_timeout => Float``

   * - maxPoolSize=Integer
     - ``:max_pool_size => Integer``

   * - minPoolSize=Integer
     - ``:min_pool_size => Integer``

   * - waitQueueTimeoutMS=Integer
     - ``:wait_queue_timeout => Float``

   * - w=Integer|String
     - ``{ :write => { :w => Integer|String }}``

   * - wtimeoutMS=Integer
     - ``{ :write => { :wtimeout => Float }}``

   * - journal=Boolean
     - ``{ :write => { :j => true|false }}``

   * - readPreference=String
     - ``{ :read => { :mode => Symbol }}``

   * - readPreferenceTags=Strings
     - ``{ :read => { :tag_sets => Array<String> }}``

   * - authSource=String
     - ``:auth_source => String``

   * - authMechanism=String
     - ``:auth_mech => Symbol``

   * - gssapiServiceName=String
     - ``{ :auth_mech_properties => { :gssapi_service_name => String }}``

Ruby Options
************

.. list-table::
   :header-rows: 1
   :widths: 40 105

   * - Option
     - Description

   * - ``:replica_set``
     - When connecting to a replica set, this is the name of the set to
       filter servers by. Takes a ``String``.

   * - ``:ssl``
     - Tell the client to connect to the servers via SSL. Takes ``true`` or
       ``false``.

   * - ``:connection_timeout``
     - The number of seconds as a ``Float`` to wait to establish a socket connection
       before raising an exception. Defaults to 5 seconds.

   * - ``:socket_timeout``
     - The number of seconds as a ``Float`` to wait for an operation to execute on a
       socket before raising an exception. Defaults to 5 seconds.

   * - ``:max_pool_size``
     - The maximum size of the connection pool for each server. Defaults to
       5 seconds.

   * - ``:min_pool_size =>``
     - The minimum number of connections in the connection pool for each
       server. Defaults to 1.

   * - ``:wait_queue_timeout``
     - The number of seconds as a ``Float`` to wait for a connection in the connection
       pool to become available. Defaults to 1.

   * - ``:write``
     - Specifies write concern options as a ``Hash``. The default write concern ``:w`` is
       ``:primary``. Keys in the hash can be ``:w``, ``:wtimeout``, ``:j``, ``:fsync``.

       .. code-block:: ruby

         { :write => { :w => 2 }}

   * - ``:read``
     - Specifies the read preference mode and tag sets for selecting servers as a ``Hash``.
       Keys in the hash are ``:mode`` and ``:tag_sets``.

       .. code-block:: ruby

         { :read => { :mode => :secondary, :tag_sets => ["berlin"] }}

   * - ``:auth_source``
     - Specifies the authentication source. For MongoDB 2.6 and higher this defaults to
       **admin** if credentials are supplied, otherwise the current database.

   * - ``:auth_mech``
     - Specifies the authenticaion mechanism to use as a ``Symbol``. Can be one of:
       ``:mongodb_cr``, ``:mongodb_x509``, ``:plain``, ``:scram``. If user credentials
       are supplied but an ``:auth_mech`` is not, then on MongoDB 3.0 and higher this
       defaults to ``:scram`` and on 2.6 and lower defaults to ``:mongodb_cr``.

   * - ``:auth_mech_properties``
     - Provides additional authentication mechanism properties as a ``Hash``.

   * - ``:user``
     - The name of the user to authenticate with as a ``String``.

   * - ``:password``
     - The password of the user to authenticate with as a ``String``.

   * - ``:connect``
     - Overrides the auto-discovery feature of the driver and forces the cluster
       topology to a specific type. Can be a ``Symbol`` from ``:direct``,
       ``:replica_set`` or ``:sharded``.

   * - ``:heartbeat_frequency``
     - The number of seconds as a ``Float`` for the server monitors to refresh
       server states asynchronously. Defaults to 10.

   * - ``:database``
     - The name of the database to connect to as a ``String``. If not supplied
       the client will default to **admin**.

   * - ``:server_selection_timeout``
     - The number of seconds as a ``Float`` to wait for an appropriate server to
       be selected for an operation to be executed before raising an exception.
       Defaults to 30.

   * - ``:local_threshold``
     - Specifies the maximum latency in seconds as a ``Float`` between the nearest
       server and the servers that can be available for selection to operate on.
       Defaults to 0.015.

Inserting
---------

Inserting documents into a collection via the driver is done by selecting a
collection on the client and calling ``insert_one`` or ``insert_many``.

Insert operations will return a ``Mongo::Operation::Result`` object which will
give you information about the insert itself.

On MongoDB 2.6 and higher, if the insert failed, then an exception will be
raised since write commands are used.

On MongoDB 2.4, an exception will only be raised if the insert failed and the
write concern is 1 or higher.

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'music')

  result = client[:artists].insert_one({ name: 'FKA Twigs' })
  result.n #=> returns 1, because 1 document was inserted.

  result = client[:artists].insert_many([
    { name: 'Flying Lotus' },
    { name: 'Aphex Twin' }
  ])
  result.n #=> returns 2, because 2 documents were inserted.

Querying
--------

The Ruby driver provides a fluent interface for querying that is accessed
via the method ``find`` on the collection. From there, one has various
options that can be added.

The query is lazily executed against the server only when iterating the
results - at that point the query is dispatched and a ``Mongo::Cursor`` is
returned.

To find all documents for a given filter, simply call ``find`` with the
query:

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'music')

  client[:artists].find(name: 'Flying Lotus').each do |document|
    #=> Yields a BSON::Document.
  end

Query Options
`````````````

To add options to a query, simply chain the appropriate methods after the
``find``. Note that the underlying object, the ``Mongo::Collection::View``,
is immutable and a new object will be returned after each method call.

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'music')

  documents = client[:artists].find(name: 'Flying Lotus').skip(10).limit(10)
  documents.each do |document|
    #=> Yields a BSON::Document.
  end

The following is a full list of the available options that can be added
when querying and their corresponding methods as examples.

.. list-table::
   :header-rows: 1
   :widths: 40 80

   * - Option
     - Description
   * - ``#allow_partial_results``
     - For use with sharded clusters. If a shard is down, allows the query
       to return results from the shards that are up, potentially only getting
       a portion of the results.
   * - ``#batch_size(integer)``
     - Specifies the size of each batch of documents the cursor will return on
       each GETMORE operation.
   * - ``#comment(string)``
     - Adds a comment to the query.
   * - ``#hint(hash)``
     - Provides the query with an index hint to use.
   * - ``#limit(integer)``
     - Limits the number of returned documents to the provided value.
   * - ``#max_scan(integer)``
     - Sets the maximum number of documents to scan if a full collection scan
       would be performed.
   * - ``#no_cursor_timeout``
     - MongoDB automatically closes inactive cursors after a period of 10
       minutes. Call this for cursors to remain open indefinitely on the server.
   * - ``#projection(hash)``
     - Specifies the fields to include or exclude from the results.

       .. code-block:: ruby

         client[:artists].find.projection(name: 1)

   * - ``#read(hash)``
     - Changes the read preference for this query only.

       .. code-block:: ruby

         client[:artists].find.read(mode: :secondary_preferred)

   * - ``#show_disk_loc(boolean)``
     - Tells the results to also include the location of the documents on disk.
   * - ``#skip(integer)``
     - Skip the provided number of documents in the results.
   * - ``#snapshot``
     - Execute the query in snapshot mode.
   * - ``#sort(hash)``
     - Specifies sort criteria for the query.

       .. code-block:: ruby

         client[:artists].find.sort(name: -1)

Additional Query Operations
```````````````````````````

To execute a count of documents on a collection, call ``count`` on the view.

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'music')

  client[:artists].find(name: 'Flying Lotus').count

To get an array of distinct field values, use ``distinct``.

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'music')

  client[:artists].find.distinct(:name)
