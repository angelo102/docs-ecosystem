.. http://docs.mongodb.org/ecosystem/tutorial/ruby-driver-tutorial/

.. _ruby-driver-tutorial:

====================
Ruby Driver Tutorial
====================

.. default-domain:: mongodb

This tutorial discusses using the core MongoDB Ruby driver, version 2.0

Installation
------------

The Ruby driver is bundled as a gem, and is hosted on `Rubygems <http://rubygems.org>`_.
The driver can be installed manually or with bundler.

To install the gem manually:

.. code-block:: sh

    gem install mongo

To install the gem with bundler, include the following in your Gemfile:

.. code-block:: ruby

    gem 'mongo', '~> 2.0'

Note the following compatibility matrix to determine if the driver is
supported on your Runtime and server.

.. list-table::
   :header-rows: 1
   :widths: 28 30 30 30

   * - Ruby Version
     - 2.4.x
     - 2.6.x
     - 3.0.x

   * - MRI 1.8.x
     - No
     - No
     - No

   * - MRI 1.9.x
     - Yes
     - Yes
     - Yes

   * - MRI 2.0.x
     - Yes
     - Yes
     - Yes

   * - MRI 2.1.x
     - Yes
     - Yes
     - Yes

   * - MRI 2.2.x
     - Yes
     - Yes
     - Yes

   * - JRuby 1.7.x
     - Yes
     - Yes
     - Yes


Creating a Client
-----------------

The entry point to using the driver in all applications is via a ``Mongo::Client``.
A client can be created by passing in a list of hosts and options, or alternatively
can be instantiated using a URI. If a database name is not provided, then the
``admin`` database will be used by default.

To create a client to a standalone server, provide one host in the seed list.
Optionally you can force the cluster topology to be standalone without going through
the auto-discovery steps.

.. code-block:: ruby

  Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'mydb')
  Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'mydb', :connect => :direct)
  Mongo::Client.new('mongodb://127.0.0.1:27017/mydb')

To create a client to a replica set, pass one or more hosts and the replica set name.
The client has an auto-discovery feature that will find all members of the replica
set if not all are provided.

.. code-block:: ruby

  Mongo::Client.new([ '127.0.0.1:27017', '127.0.0.1:27018' ], :database => 'mydb', :replica_set => 'myapp')
  Mongo::Client.new('mongodb://127.0.0.1:27017,127.0.0.1:27018/mydb?replicaSet=myapp')

To create a client to a sharded cluster, pass one or more mongos hosts. The auto-
discovery functionality will determine that the servers are mongoses, but if you
would like to force it and bypass the auto-discovery pass the sharded option to the
client.

.. code-block:: ruby

  Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'mydb')
  Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'mydb', :connect => :sharded)
  Mongo::Client.new('mongodb://127.0.0.1:27017/mydb?connect=sharded' ])
